policy:
  name: monitoring
  description: monitoring
  engine: 
    kind: opa
    url: "http://192.168.49.2:32633"
    api: 
      policy: /v1/policies/
      data: /v1/data/
  rule:
    name: closedloop.inner.monitoring
    body: |
      package closedloop.inner.monitoring
      import rego.v1
      default cpu := "ok"
      cpu := result if {
        some cpu_idx
        data.metric[cpu_idx] == "cpu"
        data.treshold.kind[cpu_idx] == "inferior"
        to_number(input.cpu) < to_number(data.treshold.value[cpu_idx])
        result := "low"
      }
      cpu := result if {
        some cpu_idx
        data.metric[cpu_idx] == "cpu"
        data.treshold.kind[cpu_idx] == "superior"
        to_number(input.cpu) > to_number(data.treshold.value[cpu_idx])
        result := "high"
      }
      cpu := result if {
        some cpu_idx
        data.metric[cpu_idx] == "cpu"
        data.treshold.kind[cpu_idx] == "uniform"
        to_number(input.cpu) == to_number(data.treshold.value[cpu_idx])
        result := "ok"
      }
      default memory := "ok"
      memory := result if {
        some memory_idx
        data.metric[memory_idx] == "memory"
        data.treshold.kind[memory_idx] == "inferior"
        to_number(input.memory) < to_number(data.treshold.value[memory_idx])
        result := "low"
      }
      memory := result if {
        some memory_idx
        data.metric[memory_idx] == "memory"
        data.treshold.kind[memory_idx] == "superior"
        to_number(input.memory) > to_number(data.tresholdvalue[memory_idx])
        result := "high"
      }
      memory := result if {
        some memory_idx
        data.metric[memory_idx] == "memory"
        data.treshold.kind[memory_idx] == "uniform"
        to_number(input.memory) == to_number(data.treshold.value[memory_idx])
        result := "ok"
      }
  kind: monitoring
  data:
    metric:
      1: cpu
      2: memory
    threshold:
      kind: 
        1: inferior
        2: inferior
      value:
        1: 5
        2: 50
  input:
    metric:
      1: cpu 
      2: memory  
    type:
      1: integer
      2: integer
    value:
      1: $source
      2: $source
    source:
      1: "#spec.message.cpu"
      2: "#spec.message.memory"
  result:
    metric:
      1: cpu 
      2: memory  
    type:
      1: enum [ok, low, high]
      2: enum [ok, low, high]
    target:
      1: "crd:decision#spec.message.cpu"
      2: "crd:decision#spec.message.memory"
